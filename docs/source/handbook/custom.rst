自定义环境/智能体
============================

自定义环境
^^^^^^^^^^^^^^^

如何实现一个新的自定义环境
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- 修改环境本身，或给原有的环境套一个 ``wrapper``，使得环境符合amb的接口
- 修改 ``amb/utils/env_utils.py``，在 ``make_train_env``， ``make_eval_env``， ``make_render_env`` 函数中添加自定义环境的信息
- 修改 ``amb/utils/config_utils.py``，在 ``get_task_name`` 中添加自定义环境任务名信息

自定义环境接口介绍
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- 环境的配置参数全部写在 ``amb/configs/envs_cfgs/{环境名}.yaml`` 中，这些参数会被以字典形式读入，并借由 ``make_xxx_env`` 函数的 ``env_args`` 传入给环境
- 你的环境类需要满足 ``amb/envs/env_example.py`` 中的所有接口，包括输入输出的类型限制和要求

需要给 ``Dual`` 环境写一个专门的 ``logger``

自定义智能体
^^^^^^^^^^^^^^^

如何实现一个新的自定义智能体
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- 在 ``/amb/models`` 中有已经定义好的基础网络结构，可以在后续智能体构建过程中调用或者自定义新的网络
- 在 ``/amb/agents`` 中已经实现了 ``coma_agent`` , ``ddpg_agent`` ， ``ppo_agnet`` ， ``q_agent`` 等智能体，可以以此为基础修改智能体或者自定义新智能体
- 修改 ``/amb/algorithms/{算法名}.py`` ，选择自己使用的智能体

自定义智能体接口介绍
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- 智能体的配置参数全部写在 ``amb/configs/algo_cfgs/{算法名}.yaml`` 中，这些参数会被以字典形式读入
- 你的环境类需要满足 ``amb/agents/base_agent.py`` 中的所有接口，包括输入输出的类型限制和要求
